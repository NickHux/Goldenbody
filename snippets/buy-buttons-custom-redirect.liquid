{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.
  - show_pickup_availability: {Boolean} for the pickup availability. If true the pickup availability is rendered, false - not rendered (optional).

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id, show_pickup_availability: true %}
{% endcomment %}
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <div class="product-form">
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <svg
          aria-hidden="true"
          focusable="false"
          class="icon icon-error"
          viewBox="0 0 13 13"
        >
          <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
          <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
        </svg>
        <span class="product-form__error-message"></span>
      </div>

      <!-- Custom Button for Redirect -->
      <div class="product-form__buttons">
        <button
          id="ProductRedirectButton-{{ section_id }}"
          type="button"
          class="product-form__submit button button--full-width button--primary"
          onclick="redirectToCustomLink()"
          {% if product.selected_or_first_available_variant.available == false or product.selected_or_first_available_variant == nil %}
            disabled
          {% endif %}
        >
          <span>
            Hier Registrieren
          </span>
        </button>

        <input
  type="hidden"
  name="id"
  value="{{ product.selected_or_first_available_variant.id }}"
  class="product-variant-id"
  {% if product.selected_or_first_available_variant.available == false or product.selected_or_first_available_variant == nil %}
    disabled
  {% endif %}
/>
<input type="hidden" class="product-variant-id" value="{{ product.selected_or_first_available_variant.id }}">
{%- if product.selected_or_first_available_variant.metafields.custom.redirect_link -%}
  <input type="hidden" id="variantRedirectLink" value="{{ product.selected_or_first_available_variant.metafields.custom.redirect_link }}">
{%- endif -%}

      </div>
    </div>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
      data-product-page-color-scheme="gradient color-{{ section.settings.color_scheme }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          {% render 'icon-unavailable' %}
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>
            <script>
  document.addEventListener("DOMContentLoaded", function() {
    // Get the current URL
    const urlParams = new URLSearchParams(window.location.search);
    let variantId = urlParams.get('variant');

    // If there is no variant ID in the URL, set the first available variant
    if (!variantId) {
      // Get the first available variant's ID
      const firstAvailableVariantId = "{{ product.selected_or_first_available_variant.id }}";

      // Update the URL with the variant ID without refreshing the page
      const newUrl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?variant=' + firstAvailableVariantId;
      window.history.replaceState({ path: newUrl }, '', newUrl);

      console.log("URL updated with first available variant ID:", firstAvailableVariantId);
    }
  });
</script>

<script>
  function redirectToCustomLink() {
    // Get the current variant ID from the URL
    const urlParams = new URLSearchParams(window.location.search);
    const variantId = urlParams.get('variant');
    
    if (variantId) {
      console.log("Current Variant ID from URL:", variantId); // Log the variant ID

      // Find the corresponding variant metafield using the current variant ID
      let redirectLink = null;

      // Loop through product variants to find the matching variant ID and its metafield
      {% for variant in product.variants %}
        if ("{{ variant.id }}" === variantId) {
          // Get the redirect link metafield for this variant
          redirectLink = "{{ variant.metafields.custom.redirect_link }}";
          console.log("Redirect link for variant:", redirectLink); // Log the redirect link
        }
      {% endfor %}

      // Check if we found a redirect link
      if (redirectLink) {
        window.open(redirectLink, '_blank'); // Open the link in a new tab
      } else {
        alert('No redirect link found for this variant.');
      }
    } else {
      alert('No variant ID found in the URL.');
    }
  }
</script>
